@page
@model IndexModel
@{
    ViewData["Title"] = "Visits";
}

<style>
    button[type="submit"] {
        background-color: #007acc;
        color: white;
        font-weight: 600;
        border: none;
        padding: 0.6rem 1.4rem;
        border-radius: 0.5rem;
        cursor: pointer;
        font-size: 1rem;
        transition: all 0.25s ease;
    }

        button[type="submit"]:hover {
            background-color: #005fa3;
            transform: translateY(-1px);
        }

        button[type="submit"]:active {
            background-color: #004b82;
            transform: scale(0.98);
        }

        button[type="submit"]:focus {
            outline: 3px solid rgba(0, 122, 204, 0.4);
            outline-offset: 2px;
        }

</style>

<h1>@ViewData["Title"]</h1>

<div id="visits_grid" style="width:100%; height:400px"></div>

<h2>Register a new visit</h2>

<form id="visitForm">
    <label>
        Employee:
        <div id="employeeComboContainer" style="margin-bottom: 10px;"></div>
    </label><br><br>

    <label>
        Customer:
        <div id="customerComboContainer"></div>
    </label><br><br>

    <label>
        Visit Date:
        <input type="datetime-local" id="visitDate" required>
    </label><br><br>

    <button type="submit">Submit</button>
</form>


@section Scripts{
    <script>
        // DHX Elementd
        var grid;
        var customerCombo;
        var employeeCombo;

        const visitsURL = "http://localhost:5000/api/visits";
        const employeesURL = "http://localhost:5000/api/employees";
        const customersURL = "http://localhost:5000/api/customers";
        var customers = [];
        var employees = [];

        document.addEventListener('DOMContentLoaded', () => {
            buildGrid();

            dhx.ajax.post(`${visitsURL}/all`, function(text) {
                (async () => {
                    const visits = JSON.parse(text.xmlDoc.response);
                    await fetchEmployees();
                    await fetchCustomers();
                    await populateVisitsGrid(visits);
                    createCombos();
                })();
            });
        });

        function buildGrid() {
            grid = new dhtmlXGridObject('visits_grid');
            grid.setImagePath('/Dhtmlx/skins/web/imgs/dhxgrid_web/');
            grid.setHeader('ID, CustomerID, EmployeeID, Visit Date');
            grid.setInitWidths('80, 150, 150, *');
            grid.setColTypes('ro,ro,ro,ro');
            grid.setColSorting('int, str, str, str');

            grid.init();
        }

        async function fetchEmployees() {
            return new Promise((resolve) => {
                dhx.ajax.post(employeesURL, (text) => {
                    const employeesResponse = JSON.parse(text.xmlDoc.response);
                    employees = employeesResponse;
                    resolve();
                });
            });
        }

        async function fetchCustomers() {
            return new Promise ((resolve) => {
                dhx.ajax.post(customersURL, (text) => {
                    const customersResponse = JSON.parse(text.xmlDoc.response);
                    customers = customersResponse;
                    resolve();
                });
            });
        }

        async function populateVisitsGrid(visits) {
            for (const visit of visits) {
                try {
                    addVisitToRow(visit);
                } catch (error) {
                    console.error(`Error fetching employee ${visit.employeeID}:${error}`);
                    grid.addRow(visit.id, [
                        visit.id,
                        visit.customerID,
                        "Unknown",
                        visit.visitDate
                    ]);
                }
            }
        }

        function addVisitToRow(visit) {
            const employee = employees.find(employee => employee.id === visit.employeeID);
            const customer = customers.find(customer => customer.id === visit.customerID);
            grid.addRow(visit.id, [
                visit.id,
                customer.name,
                employee.name,
                visit.visitDate
            ]);
        }

        function createCombos() {
            employeeCombo = new dhtmlXCombo("employeeComboContainer", "employeeCombo", 250);
            employees.forEach(employee => {
                employeeCombo.addOption([{ value: employee.id, text: employee.name }]);
            });

            customerCombo = new dhtmlXCombo("customerComboContainer", "customerCombo", 250);
            customers.forEach(customer => {
                customerCombo.addOption([{ value: customer.id, text: customer.name }]);
            });

            if (employees.length > 0) employeeCombo.selectOption(0);
            if (customers.length > 0) customerCombo.selectOption(0);
        }


        document.getElementById("visitForm").addEventListener("submit", function (e) {
            e.preventDefault();

            const employeeID = employeeCombo.getSelectedValue();
            const customerID = customerCombo.getSelectedValue();
            const visitDate = document.getElementById("visitDate").value;

            const visit = {
                employeeID: employeeID,
                customerID: customerID,
                visitDate: visitDate
            };

            fetch(`${visitsURL}/create`, {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                },
                body: JSON.stringify(visit)
            })
            .then(response => {
                if (!response.ok) throw new Error("Failed to create visit");
                return response.text();
            })
            .then(data => {
                addVisitToRow(data);
            })
            .catch(error => {
                console.error(error);
                alert("Error creating visit");
            });
        });
    </script>
}